library(dplyr)
#OlsonNames()
inicio <- "21/08/2017 18:26:40, tz = US/Pacific"
inicio <- dmy_hms(inicio)
inicio
synodic_month <- days(29) + hours(12) + minutes(44) + seconds(3)
synodic_month
saros <- synodic_month * 223
saros
proximo <- inicio + saros
proximo
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plotly)
datos <- read_csv(file = "lab5/data.csv")
datos$`Fecha Creación` <- dmy(datos$`Fecha Creación`)
datos$`Fecha Final` <- dmy(datos$`Fecha Final`)
datos$`Hora Creación` <- hm(datos$`Hora Creación`)
datos$`Hora Final` <- hm(datos$`Hora Final`)
datos %>% View()
#1. ¿En qué meses existe una mayor cantidad de llamadas por código?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
#El mes de marzo es en el que más llaman con 497 llamadas
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plotly)
datos <- read_csv(file = "lab5/data.csv")
datos$`Fecha Creación` <- dmy(datos$`Fecha Creación`)
datos$`Fecha Final` <- dmy(datos$`Fecha Final`)
datos$`Hora Creación` <- hm(datos$`Hora Creación`)
datos$`Hora Final` <- hm(datos$`Hora Final`)
datos %>% View()
#1. ¿En qué meses existe una mayor cantidad de llamadas por código?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
#El mes de marzo es en el que más llaman con 497 llamadas
#2. ¿Qué día de la semana es el más ocupado?
datos %>%
mutate(weekday = wday(`Fecha Creación`, label = T)) %>%
group_by(weekday) %>% summarise(count = n()) %>%
plot_ly(x= ~weekday, y=~count, type = 'bar')
#El día más ocupado es el domingo
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
#El mes más ocupado es marzo donde se registraron 22708 llamadas, emails y mensajes
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.duration(`Hora Creación`%--%`Hora Final`))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = `Hora Creación`%--%`Hora Final`)
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = `Hora Creación`-`Hora Final`)
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = `Hora Final`-`Hora Creación`) %>%
summarise(mean(tiempo))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
summarise(mean(`Hora Final`-`Hora Creación`))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
summarise(tiempo = mean(`Hora Final`-`Hora Creación`))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = `Hora Final`-`Hora Creación`)
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = minute(`Hora Final`-`Hora Creación`))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = minute(`Hora Final`-`Hora Creación`)) %>% View()
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.period(`Hora Final`-`Hora Creación`)) %>% View()
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(`Hora Final`, `Hora Creación`,
units = c("mins", "hours")))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(`Hora Creación`, `Hora Final`,
units = c("mins", "hours")))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(`Hora Creación`, `Hora Final`,
units = mins)))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.difftime(`Hora Creación`-`Hora Final`))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.difftime(`Hora Creación`-`Hora Final`, units = minutes))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.difftime(`Hora Creación`-`Hora Final`, units = "mins"))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.difftime(`Hora Creación`-`Hora Final`, format = %M, units = "mins"))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.difftime(`Hora Creación`-`Hora Final`, format = %X, units = "mins"))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(`Hora Creación`,`Hora Final`, units = c("secs", "mins", "hours")))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = as.difftime(time1 = `Hora Creación`, time2 = `Hora Final`, units = 'mins'))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(time1 = `Hora Creación`, time2 = `Hora Final`, units = 'mins'))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(time1 = `Hora Creación`, time2 = `Hora Final`, format = "%H:%M", units = 'mins'))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(time1 = `Hora Creación`, time2 = `Hora Final`, units = 'mins'))
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% filter(Call == 1) %>%
mutate(tiempo = difftime(time1 = datos$`Hora Creación`, time2 = datos$`Hora Final`, units = 'mins'))
#1. ¿En qué meses existe una mayor cantidad de llamadas por código?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(n = sum(Call)) %>%
arrange(desc(n)) %>%
plot_ly(x= ~mes, y=~n, type = 'bar')
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n(Cod)) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#El mes más ocupado es marzo donde se registraron 22708 llamadas, emails y mensajes
#4.¿Existe una temporalidad en la cantidad de llamadas?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
datos %>% filter(Call == 1) %>%
mutate(weekdays = wday(`Fecha Creación`, label = T)) %>%
group_by(weekdays) %>% summarise(count = n()) %>%
plot_ly(x= ~weekdays, y=~count, type = 'bar')
#5. ¿Cuántos minutos dura la llamada promedio?
data_llamada <- datos %>% select(Call, `Hora Creación`, `Hora Final`) %>% filter(Call == 1) %>% mutate(dif = datos$`Hora Creación`-data$`Hora Final`)
#5. ¿Cuántos minutos dura la llamada promedio?
data_llamada <- datos %>% select(Call, `Hora Creación`, `Hora Final`) %>% filter(Call == 1) %>% mutate(dif = datos$`Hora Creación`-datos$`Hora Final`)
#Realice una tabla de frecuencias con el tiempo de llamada.
data_frecuencia <- datos %>% select(`Fecha Creación`, `Hora Final`, `Hora Creación`) %>% mutate(dif = datos$`Hora Final`-datos$`Hora Creación`) %>% group_by(dif) %>% summarise(n())
data_frecuencia
#5. ¿Cuántos minutos dura la llamada promedio?
data_llamada <- datos %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
filter(Call == 1)
data_llamada
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
datas
mean(data_llamada$dif)
mean(datas$dif)
datas1 <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
filter(dif>0) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
datas1 <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`, dif) %>%
filter(dif>0) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
datas
mean(datas$dif)
datas1 <- datas %>%
select(Call, `Hora Creación`, `Hora Final`, dif) %>%
filter(dif>0) %>%
mutate(dif = datas$`Hora Creación`-datas$`Hora Final`)
datas1 <- datas %>%
select(Call, `Hora Creación`, `Hora Final`, dif) %>%
filter(dif>0)
datas1
mean(datas1$dif)
datas
datas1 <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`) %>% filter(dif>0)
mean(datas1$dif)
#En tiempo de Norte América, el eclipse total inició el 21 de agosto del 2017 a las 18:26:40.
#Este mismo evento, sucederá un Saros después.
#Un Saros equivale a 223 Synodic Months
#Un Synodic Month equivale a 29 días con 12 horas, con 44 minutos y 3 segundos.
library(lubridate)
library(dplyr)
#OlsonNames()
inicio <- "21/08/2017 18:26:40, tz = US/Pacific"
inicio <- dmy_hms(inicio)
inicio
synodic_month <- days(29) + hours(12) + minutes(44) + seconds(3)
synodic_month
saros <- synodic_month * 223
saros
proximo <- inicio + saros
proximo
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plotly)
datos <- read_csv(file = "lab5/data.csv")
datos$`Fecha Creación` <- dmy(datos$`Fecha Creación`)
datos$`Fecha Final` <- dmy(datos$`Fecha Final`)
datos %>% View()
#1. ¿En qué meses existe una mayor cantidad de llamadas por código?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(n = sum(Call)) %>%
arrange(desc(n)) %>%
plot_ly(x= ~mes, y=~n, type = 'bar')
#El mes de marzo es en el que más llaman con 497 llamadas
#2. ¿Qué día de la semana es el más ocupado?
datos %>%
mutate(weekday = wday(`Fecha Creación`, label = T)) %>%
group_by(weekday) %>% summarise(count = n()) %>%
plot_ly(x= ~weekday, y=~count, type = 'bar')
#El día más ocupado es el domingo
#4.¿Existe una temporalidad en la cantidad de llamadas?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
datos %>% filter(Call == 1) %>%
mutate(weekdays = wday(`Fecha Creación`, label = T)) %>%
group_by(weekdays) %>% summarise(count = n()) %>%
plot_ly(x= ~weekdays, y=~count, type = 'bar')
#No hay temporalidad ni por mes ni por día
#5. ¿Cuántos minutos dura la llamada promedio?
data_llamada <- datos %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
filter(Call == 1)
data_llamada
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
#5. ¿Cuántos minutos dura la llamada promedio?
datos$`Hora Creación` <- hms(datos$`Hora Creación`)
#5. ¿Cuántos minutos dura la llamada promedio?
datos$`Hora Creación` <- as.Date(datos$`Hora Creación`,format= "%H:%M")
#5. ¿Cuántos minutos dura la llamada promedio?
datos$`Hora Creación` <- as.Date.numeric(datos$`Hora Creación`,format= "%H:%M")
#5. ¿Cuántos minutos dura la llamada promedio?
datos$`Hora Creación` <- as.Date(datos$`Hora Creación`,format= "%H:%M:%S")
#5. ¿Cuántos minutos dura la llamada promedio?
data_llamada <- datos %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
filter(Call == 1)
#En tiempo de Norte América, el eclipse total inició el 21 de agosto del 2017 a las 18:26:40.
#Este mismo evento, sucederá un Saros después.
#Un Saros equivale a 223 Synodic Months
#Un Synodic Month equivale a 29 días con 12 horas, con 44 minutos y 3 segundos.
library(lubridate)
library(dplyr)
#OlsonNames()
inicio <- "21/08/2017 18:26:40, tz = US/Pacific"
inicio <- dmy_hms(inicio)
inicio
synodic_month <- days(29) + hours(12) + minutes(44) + seconds(3)
synodic_month
saros <- synodic_month * 223
saros
proximo <- inicio + saros
proximo
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plotly)
datos <- read_csv(file = "lab5/data.csv")
datos$`Fecha Creación` <- dmy(datos$`Fecha Creación`)
datos$`Fecha Final` <- dmy(datos$`Fecha Final`)
#1. ¿En qué meses existe una mayor cantidad de llamadas por código?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(n = sum(Call)) %>%
arrange(desc(n)) %>%
plot_ly(x= ~mes, y=~n, type = 'bar')
#El mes de marzo es en el que más llaman con 497 llamadas
#2. ¿Qué día de la semana es el más ocupado?
datos %>%
mutate(weekday = wday(`Fecha Creación`, label = T)) %>%
group_by(weekday) %>% summarise(count = n()) %>%
plot_ly(x= ~weekday, y=~count, type = 'bar')
#El día más ocupado es el domingo
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#El mes más ocupado es marzo donde se registraron 22708 llamadas, emails y mensajes
#4.¿Existe una temporalidad en la cantidad de llamadas?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
datos %>% filter(Call == 1) %>%
mutate(weekdays = wday(`Fecha Creación`, label = T)) %>%
group_by(weekdays) %>% summarise(count = n()) %>%
plot_ly(x= ~weekdays, y=~count, type = 'bar')
#No hay temporalidad ni por mes ni por día
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% View()
data_llamada <- datos %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
filter(Call == 1)
data_llamada
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
datas
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = min(data_llamada$`Hora Creación`-data_llamada$`Hora Final`))
datas
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = mins(data_llamada$`Hora Creación`-data_llamada$`Hora Final`))
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif = minutes(data_llamada$`Hora Creación`-data_llamada$`Hora Final`))
datas
datas <- data_llamada %>%
select(Call, `Hora Creación`, `Hora Final`) %>%
mutate(dif =data_llamada$`Hora Creación`-data_llamada$`Hora Final`)
datas
mean(datas$dif)
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>% arrange(desc(Cod))
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>% arrange(desc(cod))
plot_ly(x= ~mes, y=~cod, type = 'bar')
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>%
arrange(desc(cod)) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#El mes más ocupado es marzo donde se registraron 22708 llamadas, emails y mensajes
datos$Tiempo <- difftime(datos$`Hora Final`, datos$`Hora Creación`, units = "mins")
#5. ¿Cuántos minutos dura la llamada promedio?
datos %>% View()
mean(datos$Tiempo)
?abs
datos$Tiempo <- difftime(datos$`Hora Final`, datos$`Hora Creación`, units = "mins")
mean(datos$Tiempo)
datos %>%  filter(datos$Tiempo > 0)
datos %>%  filter(datos$Tiempo > 0) %>% mean(datos$Tiempo)
Positivo <- datos %>%  filter(datos$Tiempo > 0)
Positivo
mean(Positivo$Tiempo)
#Realice una tabla de frecuencias con el tiempo de llamada.
frecuencia <- data.frame(datos %>%
select(Tiempo) %>% filter(Tiempo >0)%>%
group_by(Tiempo) %>%
summarise(cantidad = n()))
frecuencia
#5. ¿Cuántos minutos dura la llamada promedio?
datos1 <- datos %>% filter(Call == 1)
datos1$Tiempo <- difftime(datos$`Hora Final`, datos$`Hora Creación`, units = "mins")
#5. ¿Cuántos minutos dura la llamada promedio?
datos_Call <- datos %>% filter(Call == 1)
datos_Call$Tiempo <- difftime(datos_Call$`Hora Final`, datos_Call$`Hora Creación`, units = "mins")
mean(datos_Call$Tiempo)
mean(datos_Call$Tiempo)
Positivo <- datos %>%  filter(datos$Tiempo > 0)
Positivo <- datos_Call %>%  filter(datos_Call$Tiempo > 0)
mean(Positivo$Tiempo)
#Realice una tabla de frecuencias con el tiempo de llamada.
frecuencia <- data.frame(datos_Call %>%
select(Tiempo) %>% filter(Tiempo >0)%>%
group_by(Tiempo) %>%
summarise(cantidad = n()))
frecuencia
frecuencia %>% plot_ly(x= ~Tiempo, y = ~cantidad, type= "bar")
datos_Call %>% View()
Positivo <- datos_Call %>%  filter(datos_Call$Tiempo >= 0)
mean(Positivo$Tiempo)
min(datos_Call)
min(datos_Call$Tiempo)
mean(datos_Call$Tiempo)
mean(Positivo$Tiempo)
#Realice una tabla de frecuencias con el tiempo de llamada.
frecuencia <- data.frame(datos_Call %>%
select(Tiempo) %>% filter(Tiempo >=0)%>%
group_by(Tiempo) %>%
summarise(cantidad = n()))
frecuencia
frecuencia %>% plot_ly(x= ~Tiempo, y = ~cantidad, type= "bar")
#En tiempo de Norte América, el eclipse total inició el 21 de agosto del 2017 a las 18:26:40.
#Este mismo evento, sucederá un Saros después.
#Un Saros equivale a 223 Synodic Months
#Un Synodic Month equivale a 29 días con 12 horas, con 44 minutos y 3 segundos.
library(lubridate)
library(dplyr)
#OlsonNames()
inicio <- "21/08/2017 18:26:40, tz = US/Pacific"
inicio <- dmy_hms(inicio)
inicio
synodic_month <- days(29) + hours(12) + minutes(44) + seconds(3)
synodic_month
saros <- synodic_month * 223
saros
proximo <- inicio + saros
proximo
library(readr)
library(lubridate)
library(dplyr)
library(ggplot2)
library(plotly)
datos <- read_csv(file = "lab5/data.csv")
datos$`Fecha Creación` <- dmy(datos$`Fecha Creación`)
datos$`Fecha Final` <- dmy(datos$`Fecha Final`)
#1. ¿En qué meses existe una mayor cantidad de llamadas por código?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(n = sum(Call)) %>%
arrange(desc(n)) %>%
plot_ly(x= ~mes, y=~n, type = 'bar')
#El mes de marzo es en el que más llaman con 497 llamadas
#2. ¿Qué día de la semana es el más ocupado?
datos %>%
mutate(weekday = wday(`Fecha Creación`, label = T)) %>%
group_by(weekday) %>% summarise(count = n()) %>%
plot_ly(x= ~weekday, y=~count, type = 'bar')
#El día más ocupado es el domingo
#3.¿Qué mes es el más ocupado?
datos %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(cod = n()) %>%
arrange(desc(cod)) %>%
plot_ly(x= ~mes, y=~cod, type = 'bar')
#El mes más ocupado es marzo donde se registraron 22708 llamadas, emails y mensajes
#4.¿Existe una temporalidad en la cantidad de llamadas?
datos %>% filter(Call == 1) %>%
mutate(mes = month(`Fecha Creación`, label = T)) %>%
group_by(mes) %>% summarise(count = n()) %>%
plot_ly(x= ~mes, y=~count, type = 'bar')
datos %>% filter(Call == 1) %>%
mutate(weekdays = wday(`Fecha Creación`, label = T)) %>%
group_by(weekdays) %>% summarise(count = n()) %>%
plot_ly(x= ~weekdays, y=~count, type = 'bar')
#No hay temporalidad ni por mes ni por día
#5. ¿Cuántos minutos dura la llamada promedio?
datos_Call <- datos %>% filter(Call == 1)
datos_Call$Tiempo <- difftime(datos_Call$`Hora Final`, datos_Call$`Hora Creación`, units = "mins")
mean(datos_Call$Tiempo)
Positivo <- datos_Call %>%  filter(datos_Call$Tiempo >= 0)
mean(Positivo$Tiempo)
#El promedio es de 7.76 minutos
#Pero hay un problema cuando se llega a las 12 porque lo toma como 00 y no como 24 entonces no calcula bien la differencia
#El promedio tomando en cuenta eso es 14.54 min
#Realice una tabla de frecuencias con el tiempo de llamada.
frecuencia <- data.frame(datos_Call %>%
select(Tiempo) %>% filter(Tiempo >=0)%>%
group_by(Tiempo) %>%
summarise(cantidad = n()))
frecuencia
frecuencia %>% plot_ly(x= ~Tiempo, y = ~cantidad, type= "bar")
allow_html_dependencies: true
always_allow_html: yes
knit_with_parameters('C:/Users/Mafer/Desktop/GitHub/DataWranglingR/Laboratorio5/Laboratorio5.Rmd')
knit_with_parameters('C:/Users/Mafer/Desktop/GitHub/DataWranglingR/Laboratorio5/Laboratorio5.Rmd')
knit_with_parameters('C:/Users/Mafer/Desktop/GitHub/DataWranglingR/Laboratorio5/Laboratorio5.Rmd')
always_allow_html: yes
always_allow_html: yes
output:
md_document:
allow_html_dependencies: true
install.packages("webshot")
webshot::install_phantomjs()
install.packages("webshot")
webshot::install_phantomjs()
frecuencia %>% plot_ly(x= ~Tiempo, y = ~cantidad, type= "bar")
