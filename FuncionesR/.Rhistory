find_sample <- function(x) {
for_index <- sample(1:nrow(x), size = 10, replace = FALSE)
new_df <- x[for_index,]
return(new_df)
}
data <- data.frame(
a= 1:10,
b= sample(c("GT", "US","CA"),size = 10, replace = TRUE )
)
find_sample(data)
generate_df <-function(x) {
df <- data.frame(
a= sample(letters, size =10, replace=TRUE),
b = sample(1:10, size=10, replace=TRUE)
)
return(df)
}
generate_df(1)
result_list <- list()
system.time(for(i in 1:100){
result_list[[i]] <- generate_df(1)
})
generate_df <-function(x) {
df <- data.frame(
a= sample(letters, size =10, replace=TRUE),
b = sample(1:10, size=10, replace=TRUE)
)
return(df)
}
generate_df(1)
result_list <- list()
system.time(for(i in 1:100000){
result_list[[i]] <- generate_df(1)
})
generate_df <-function(x) {
df <- data.frame(
a= sample(letters, size =10, replace=TRUE),
b = sample(1:10, size=10, replace=TRUE)
)
return(df)
}
generate_df(1)
result_list <- list()
system.time(for(i in 1:10000){
result_list[[i]] <- generate_df(1)
})
system.time(
lapply(1:10000, generate_df)
)
costomo <- c(43,44,45,46,47)
probmo <- c(0.1,0.2,0.4,0.2,0.1)
mano_obra <- sample(costomo, size= 1000, prob =probmo, replace= T)
#Costo de materiales
materiales - runif(1000, min =80, max=100)
#Demanda
demanda <- round(rnorm(n=1000, mean =15000, sd=4500),0)
#Costos fijos y precio
cp <-(400000)
ca <-(600000)
precio <- (249)
#Costo de materiales
materiales <- runif(1000, min =80, max=100)
#Demanda
demanda <- round(rnorm(n=1000, mean =15000, sd=4500),0)
#Costos fijos y precio
cp <-(400000)
ca <-(600000)
precio <- (249)
#Obtener ganancia
ganancia <- (precio, mano_obra, materiales)*demanda -cp-ca
ganancia <- ((precio-mano_obra-materiales)*demanda)-cp-ca
ganancia
mediaganancia <-mean(ganancia)
mediaganancia
desvganancia <- sd(ganancia)
desvganancia
sumaganancia<- suma(ganancia<0)
sumaganancia<- sum(ganancia<0)
sumaganancia
prob <- sumaganancia/1000
prob
setwd("C:/Users/Mafer/Downloads/data/data")
library(readr)
library(tidyverse)
library(tidytext)
text_file <- 'beatles.txt'
readLines(text_file, n=10, encoding = "UTF-8", skipNul = TRUE)
#usando readr
beatles_lines <- read_lines(text_file) #Esto hace lo mismo que lo de arriba
beatles_lines
system.time(readLines(text_file, encoding = "UTF-8", skipNul = TRUE))
system.time(read_lines(text_file))
#obtener partes de un string, 10 primeros caracteres de cada linea, del 1 al 10. Es mas rapido porque lo aplica a todo.
substr(beatles_lines, 1,10)
#tokenizar, volver cada palabra de las lineas en un elemento
beatles_frame <- data.frame(txt=quijote_lines)
#tokenizar, volver cada palabra de las lineas en un elemento
beatles_frame <- data.frame(txt=beatles_lines)
head(beatles_frame)
beatles_frame$txt <- as.character(beatles_frame$txt)
beatles_words <- unnest_tokens(beatles_frame, input = txt, output = words, token = "words") #cada elemento es una fila
head(beatles_words)
# Contar
beatles_count <- count(quijote_words, words, sort = TRUE)
# Contar
beatles_count <- count(beatles_words, words, sort = TRUE)
beatles_count
class(beatles_count)
#limpiar stopwords(articulos o preposiciones que no agregan valor)
library(quanteda)
english_stopwords <- data.frame(words=quanteda::stopwords(language= "en"))
view(english_stopwords)
#antijoin, quita lo que esta en comun de ambos dataframe, que son los stopwords
beatles_words_clean <- anti_join(beatles_words, spanish_stopwords)
#antijoin, quita lo que esta en comun de ambos dataframe, que son los stopwords
beatles_words_clean <- anti_join(beatles_words, english_stopwords)
beatles_count <- count(beatles_words_clean, words, sort = TRUE)
beatles_count
